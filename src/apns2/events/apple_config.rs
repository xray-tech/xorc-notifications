// This file is generated by rust-protobuf 2.0.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct TokenConfig {
    // message fields
    pkcs8: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    key_id: ::protobuf::SingularField<::std::string::String>,
    team_id: ::protobuf::SingularField<::std::string::String>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TokenConfig {
    pub fn new() -> TokenConfig {
        ::std::default::Default::default()
    }

    // required bytes pkcs8 = 2;

    pub fn clear_pkcs8(&mut self) {
        self.pkcs8.clear();
    }

    pub fn has_pkcs8(&self) -> bool {
        self.pkcs8.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pkcs8(&mut self, v: ::std::vec::Vec<u8>) {
        self.pkcs8 = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pkcs8(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.pkcs8.is_none() {
            self.pkcs8.set_default();
        }
        self.pkcs8.as_mut().unwrap()
    }

    // Take field
    pub fn take_pkcs8(&mut self) -> ::std::vec::Vec<u8> {
        self.pkcs8.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_pkcs8(&self) -> &[u8] {
        match self.pkcs8.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // required string key_id = 3;

    pub fn clear_key_id(&mut self) {
        self.key_id.clear();
    }

    pub fn has_key_id(&self) -> bool {
        self.key_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key_id(&mut self, v: ::std::string::String) {
        self.key_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key_id(&mut self) -> &mut ::std::string::String {
        if self.key_id.is_none() {
            self.key_id.set_default();
        }
        self.key_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_key_id(&mut self) -> ::std::string::String {
        self.key_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_key_id(&self) -> &str {
        match self.key_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // required string team_id = 4;

    pub fn clear_team_id(&mut self) {
        self.team_id.clear();
    }

    pub fn has_team_id(&self) -> bool {
        self.team_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_id(&mut self, v: ::std::string::String) {
        self.team_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_team_id(&mut self) -> &mut ::std::string::String {
        if self.team_id.is_none() {
            self.team_id.set_default();
        }
        self.team_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_team_id(&mut self) -> ::std::string::String {
        self.team_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_team_id(&self) -> &str {
        match self.team_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
}

impl ::protobuf::Message for TokenConfig {
    fn is_initialized(&self) -> bool {
        if self.pkcs8.is_none() {
            return false;
        }
        if self.key_id.is_none() {
            return false;
        }
        if self.team_id.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.pkcs8)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.key_id)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.team_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.pkcs8.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(ref v) = self.key_id.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(ref v) = self.team_id.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.pkcs8.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(ref v) = self.key_id.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(ref v) = self.team_id.as_ref() {
            os.write_string(4, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TokenConfig {
        TokenConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "pkcs8",
                    |m: &TokenConfig| { &m.pkcs8 },
                    |m: &mut TokenConfig| { &mut m.pkcs8 },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "key_id",
                    |m: &TokenConfig| { &m.key_id },
                    |m: &mut TokenConfig| { &mut m.key_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "team_id",
                    |m: &TokenConfig| { &m.team_id },
                    |m: &mut TokenConfig| { &mut m.team_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TokenConfig>(
                    "TokenConfig",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TokenConfig {
        static mut instance: ::protobuf::lazy::Lazy<TokenConfig> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TokenConfig,
        };
        unsafe {
            instance.get(TokenConfig::new)
        }
    }
}

impl ::protobuf::Clear for TokenConfig {
    fn clear(&mut self) {
        self.clear_pkcs8();
        self.clear_key_id();
        self.clear_team_id();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TokenConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TokenConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CertificateConfig {
    // message fields
    pkcs12: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    password: ::protobuf::SingularField<::std::string::String>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl CertificateConfig {
    pub fn new() -> CertificateConfig {
        ::std::default::Default::default()
    }

    // required bytes pkcs12 = 2;

    pub fn clear_pkcs12(&mut self) {
        self.pkcs12.clear();
    }

    pub fn has_pkcs12(&self) -> bool {
        self.pkcs12.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pkcs12(&mut self, v: ::std::vec::Vec<u8>) {
        self.pkcs12 = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pkcs12(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.pkcs12.is_none() {
            self.pkcs12.set_default();
        }
        self.pkcs12.as_mut().unwrap()
    }

    // Take field
    pub fn take_pkcs12(&mut self) -> ::std::vec::Vec<u8> {
        self.pkcs12.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_pkcs12(&self) -> &[u8] {
        match self.pkcs12.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // required string password = 3;

    pub fn clear_password(&mut self) {
        self.password.clear();
    }

    pub fn has_password(&self) -> bool {
        self.password.is_some()
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: ::std::string::String) {
        self.password = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut ::std::string::String {
        if self.password.is_none() {
            self.password.set_default();
        }
        self.password.as_mut().unwrap()
    }

    // Take field
    pub fn take_password(&mut self) -> ::std::string::String {
        self.password.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_password(&self) -> &str {
        match self.password.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
}

impl ::protobuf::Message for CertificateConfig {
    fn is_initialized(&self) -> bool {
        if self.pkcs12.is_none() {
            return false;
        }
        if self.password.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.pkcs12)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.password)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.pkcs12.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(ref v) = self.password.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.pkcs12.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(ref v) = self.password.as_ref() {
            os.write_string(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CertificateConfig {
        CertificateConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "pkcs12",
                    |m: &CertificateConfig| { &m.pkcs12 },
                    |m: &mut CertificateConfig| { &mut m.pkcs12 },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "password",
                    |m: &CertificateConfig| { &m.password },
                    |m: &mut CertificateConfig| { &mut m.password },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CertificateConfig>(
                    "CertificateConfig",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CertificateConfig {
        static mut instance: ::protobuf::lazy::Lazy<CertificateConfig> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CertificateConfig,
        };
        unsafe {
            instance.get(CertificateConfig::new)
        }
    }
}

impl ::protobuf::Clear for CertificateConfig {
    fn clear(&mut self) {
        self.clear_pkcs12();
        self.clear_password();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CertificateConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CertificateConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AppleConfig {
    // message fields
    application_id: ::protobuf::SingularField<::std::string::String>,
    apns_topic: ::protobuf::SingularField<::std::string::String>,
    endpoint: ::std::option::Option<ConnectionEndpoint>,
    // message oneof groups
    pub connection: ::std::option::Option<AppleConfig_oneof_connection>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum AppleConfig_oneof_connection {
    token(TokenConfig),
    certificate(CertificateConfig),
    deleted(bool),
}

impl AppleConfig {
    pub fn new() -> AppleConfig {
        ::std::default::Default::default()
    }

    // required string application_id = 1;

    pub fn clear_application_id(&mut self) {
        self.application_id.clear();
    }

    pub fn has_application_id(&self) -> bool {
        self.application_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_application_id(&mut self, v: ::std::string::String) {
        self.application_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_application_id(&mut self) -> &mut ::std::string::String {
        if self.application_id.is_none() {
            self.application_id.set_default();
        }
        self.application_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_application_id(&mut self) -> ::std::string::String {
        self.application_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_application_id(&self) -> &str {
        match self.application_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // required string apns_topic = 2;

    pub fn clear_apns_topic(&mut self) {
        self.apns_topic.clear();
    }

    pub fn has_apns_topic(&self) -> bool {
        self.apns_topic.is_some()
    }

    // Param is passed by value, moved
    pub fn set_apns_topic(&mut self, v: ::std::string::String) {
        self.apns_topic = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_apns_topic(&mut self) -> &mut ::std::string::String {
        if self.apns_topic.is_none() {
            self.apns_topic.set_default();
        }
        self.apns_topic.as_mut().unwrap()
    }

    // Take field
    pub fn take_apns_topic(&mut self) -> ::std::string::String {
        self.apns_topic.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_apns_topic(&self) -> &str {
        match self.apns_topic.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // required .notification.ConnectionEndpoint endpoint = 3;

    pub fn clear_endpoint(&mut self) {
        self.endpoint = ::std::option::Option::None;
    }

    pub fn has_endpoint(&self) -> bool {
        self.endpoint.is_some()
    }

    // Param is passed by value, moved
    pub fn set_endpoint(&mut self, v: ConnectionEndpoint) {
        self.endpoint = ::std::option::Option::Some(v);
    }

    pub fn get_endpoint(&self) -> ConnectionEndpoint {
        self.endpoint.unwrap_or(ConnectionEndpoint::Production)
    }

    // optional .notification.TokenConfig token = 4;

    pub fn clear_token(&mut self) {
        self.connection = ::std::option::Option::None;
    }

    pub fn has_token(&self) -> bool {
        match self.connection {
            ::std::option::Option::Some(AppleConfig_oneof_connection::token(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: TokenConfig) {
        self.connection = ::std::option::Option::Some(AppleConfig_oneof_connection::token(v))
    }

    // Mutable pointer to the field.
    pub fn mut_token(&mut self) -> &mut TokenConfig {
        if let ::std::option::Option::Some(AppleConfig_oneof_connection::token(_)) = self.connection {
        } else {
            self.connection = ::std::option::Option::Some(AppleConfig_oneof_connection::token(TokenConfig::new()));
        }
        match self.connection {
            ::std::option::Option::Some(AppleConfig_oneof_connection::token(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_token(&mut self) -> TokenConfig {
        if self.has_token() {
            match self.connection.take() {
                ::std::option::Option::Some(AppleConfig_oneof_connection::token(v)) => v,
                _ => panic!(),
            }
        } else {
            TokenConfig::new()
        }
    }

    pub fn get_token(&self) -> &TokenConfig {
        match self.connection {
            ::std::option::Option::Some(AppleConfig_oneof_connection::token(ref v)) => v,
            _ => TokenConfig::default_instance(),
        }
    }

    // optional .notification.CertificateConfig certificate = 5;

    pub fn clear_certificate(&mut self) {
        self.connection = ::std::option::Option::None;
    }

    pub fn has_certificate(&self) -> bool {
        match self.connection {
            ::std::option::Option::Some(AppleConfig_oneof_connection::certificate(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_certificate(&mut self, v: CertificateConfig) {
        self.connection = ::std::option::Option::Some(AppleConfig_oneof_connection::certificate(v))
    }

    // Mutable pointer to the field.
    pub fn mut_certificate(&mut self) -> &mut CertificateConfig {
        if let ::std::option::Option::Some(AppleConfig_oneof_connection::certificate(_)) = self.connection {
        } else {
            self.connection = ::std::option::Option::Some(AppleConfig_oneof_connection::certificate(CertificateConfig::new()));
        }
        match self.connection {
            ::std::option::Option::Some(AppleConfig_oneof_connection::certificate(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_certificate(&mut self) -> CertificateConfig {
        if self.has_certificate() {
            match self.connection.take() {
                ::std::option::Option::Some(AppleConfig_oneof_connection::certificate(v)) => v,
                _ => panic!(),
            }
        } else {
            CertificateConfig::new()
        }
    }

    pub fn get_certificate(&self) -> &CertificateConfig {
        match self.connection {
            ::std::option::Option::Some(AppleConfig_oneof_connection::certificate(ref v)) => v,
            _ => CertificateConfig::default_instance(),
        }
    }

    // optional bool deleted = 6;

    pub fn clear_deleted(&mut self) {
        self.connection = ::std::option::Option::None;
    }

    pub fn has_deleted(&self) -> bool {
        match self.connection {
            ::std::option::Option::Some(AppleConfig_oneof_connection::deleted(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_deleted(&mut self, v: bool) {
        self.connection = ::std::option::Option::Some(AppleConfig_oneof_connection::deleted(v))
    }

    pub fn get_deleted(&self) -> bool {
        match self.connection {
            ::std::option::Option::Some(AppleConfig_oneof_connection::deleted(v)) => v,
            _ => false,
        }
    }
}

impl ::protobuf::Message for AppleConfig {
    fn is_initialized(&self) -> bool {
        if self.application_id.is_none() {
            return false;
        }
        if self.apns_topic.is_none() {
            return false;
        }
        if self.endpoint.is_none() {
            return false;
        }
        if let Some(AppleConfig_oneof_connection::token(ref v)) = self.connection {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(AppleConfig_oneof_connection::certificate(ref v)) = self.connection {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.application_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.apns_topic)?;
                },
                3 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.endpoint, 3, &mut self.unknown_fields)?
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.connection = ::std::option::Option::Some(AppleConfig_oneof_connection::token(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.connection = ::std::option::Option::Some(AppleConfig_oneof_connection::certificate(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.connection = ::std::option::Option::Some(AppleConfig_oneof_connection::deleted(is.read_bool()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.application_id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.apns_topic.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.endpoint {
            my_size += ::protobuf::rt::enum_size(3, v);
        }
        if let ::std::option::Option::Some(ref v) = self.connection {
            match v {
                &AppleConfig_oneof_connection::token(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &AppleConfig_oneof_connection::certificate(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &AppleConfig_oneof_connection::deleted(v) => {
                    my_size += 2;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.application_id.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.apns_topic.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(v) = self.endpoint {
            os.write_enum(3, v.value())?;
        }
        if let ::std::option::Option::Some(ref v) = self.connection {
            match v {
                &AppleConfig_oneof_connection::token(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &AppleConfig_oneof_connection::certificate(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &AppleConfig_oneof_connection::deleted(v) => {
                    os.write_bool(6, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AppleConfig {
        AppleConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "application_id",
                    |m: &AppleConfig| { &m.application_id },
                    |m: &mut AppleConfig| { &mut m.application_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "apns_topic",
                    |m: &AppleConfig| { &m.apns_topic },
                    |m: &mut AppleConfig| { &mut m.apns_topic },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ConnectionEndpoint>>(
                    "endpoint",
                    |m: &AppleConfig| { &m.endpoint },
                    |m: &mut AppleConfig| { &mut m.endpoint },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, TokenConfig>(
                    "token",
                    AppleConfig::has_token,
                    AppleConfig::get_token,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, CertificateConfig>(
                    "certificate",
                    AppleConfig::has_certificate,
                    AppleConfig::get_certificate,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                    "deleted",
                    AppleConfig::has_deleted,
                    AppleConfig::get_deleted,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AppleConfig>(
                    "AppleConfig",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AppleConfig {
        static mut instance: ::protobuf::lazy::Lazy<AppleConfig> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AppleConfig,
        };
        unsafe {
            instance.get(AppleConfig::new)
        }
    }
}

impl ::protobuf::Clear for AppleConfig {
    fn clear(&mut self) {
        self.clear_application_id();
        self.clear_apns_topic();
        self.clear_endpoint();
        self.clear_token();
        self.clear_certificate();
        self.clear_deleted();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AppleConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AppleConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ConnectionEndpoint {
    Production = 1,
    Sandbox = 2,
}

impl ::protobuf::ProtobufEnum for ConnectionEndpoint {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ConnectionEndpoint> {
        match value {
            1 => ::std::option::Option::Some(ConnectionEndpoint::Production),
            2 => ::std::option::Option::Some(ConnectionEndpoint::Sandbox),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ConnectionEndpoint] = &[
            ConnectionEndpoint::Production,
            ConnectionEndpoint::Sandbox,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ConnectionEndpoint", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ConnectionEndpoint {
}

impl ::protobuf::reflect::ProtobufValue for ConnectionEndpoint {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fnotification/apple_config.proto\x12\x0cnotification\"=\n\x0bTokenC\
    onfig\x12\r\n\x05pkcs8\x18\x02\x20\x02(\x0c\x12\x0e\n\x06key_id\x18\x03\
    \x20\x02(\t\x12\x0f\n\x07team_id\x18\x04\x20\x02(\t\"5\n\x11CertificateC\
    onfig\x12\x0e\n\x06pkcs12\x18\x02\x20\x02(\x0c\x12\x10\n\x08password\x18\
    \x03\x20\x02(\t\"\xf2\x01\n\x0bAppleConfig\x12\x16\n\x0eapplication_id\
    \x18\x01\x20\x02(\t\x12\x12\n\napns_topic\x18\x02\x20\x02(\t\x122\n\x08e\
    ndpoint\x18\x03\x20\x02(\x0e2\x20.notification.ConnectionEndpoint\x12*\n\
    \x05token\x18\x04\x20\x01(\x0b2\x19.notification.TokenConfigH\0\x126\n\
    \x0bcertificate\x18\x05\x20\x01(\x0b2\x1f.notification.CertificateConfig\
    H\0\x12\x11\n\x07deleted\x18\x06\x20\x01(\x08H\0B\x0c\n\nconnection*1\n\
    \x12ConnectionEndpoint\x12\x0e\n\nProduction\x10\x01\x12\x0b\n\x07Sandbo\
    x\x10\x02\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
