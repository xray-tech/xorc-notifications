// This file is generated by rust-protobuf 2.0.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct WebPushResult {
    // message fields
    successful: ::std::option::Option<bool>,
    error: ::std::option::Option<WebPushResult_Error>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl WebPushResult {
    pub fn new() -> WebPushResult {
        ::std::default::Default::default()
    }

    // required bool successful = 1;

    pub fn clear_successful(&mut self) {
        self.successful = ::std::option::Option::None;
    }

    pub fn has_successful(&self) -> bool {
        self.successful.is_some()
    }

    // Param is passed by value, moved
    pub fn set_successful(&mut self, v: bool) {
        self.successful = ::std::option::Option::Some(v);
    }

    pub fn get_successful(&self) -> bool {
        self.successful.unwrap_or(false)
    }

    // optional .notification.WebPushResult.Error error = 2;

    pub fn clear_error(&mut self) {
        self.error = ::std::option::Option::None;
    }

    pub fn has_error(&self) -> bool {
        self.error.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: WebPushResult_Error) {
        self.error = ::std::option::Option::Some(v);
    }

    pub fn get_error(&self) -> WebPushResult_Error {
        self.error.unwrap_or(WebPushResult_Error::Unspecified)
    }
}

impl ::protobuf::Message for WebPushResult {
    fn is_initialized(&self) -> bool {
        if self.successful.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.successful = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.error, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.successful {
            my_size += 2;
        }
        if let Some(v) = self.error {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.successful {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.error {
            os.write_enum(2, v.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WebPushResult {
        WebPushResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "successful",
                    |m: &WebPushResult| { &m.successful },
                    |m: &mut WebPushResult| { &mut m.successful },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<WebPushResult_Error>>(
                    "error",
                    |m: &WebPushResult| { &m.error },
                    |m: &mut WebPushResult| { &mut m.error },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<WebPushResult>(
                    "WebPushResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WebPushResult {
        static mut instance: ::protobuf::lazy::Lazy<WebPushResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const WebPushResult,
        };
        unsafe {
            instance.get(WebPushResult::new)
        }
    }
}

impl ::protobuf::Clear for WebPushResult {
    fn clear(&mut self) {
        self.clear_successful();
        self.clear_error();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WebPushResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WebPushResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum WebPushResult_Error {
    Unspecified = 1,
    Unauthorized = 2,
    BadRequest = 3,
    ServerError = 4,
    NotImplemented = 5,
    InvalidUri = 6,
    TimeoutError = 7,
    EndpointNotValid = 8,
    EndpointNotFound = 9,
    PayloadTooLarge = 10,
    TlsError = 11,
    InvalidPackageName = 12,
    InvalidTtl = 13,
    MissingCryptoKeys = 14,
    InvalidCryptoKeys = 15,
    InvalidResponse = 16,
    Other = 17,
}

impl ::protobuf::ProtobufEnum for WebPushResult_Error {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<WebPushResult_Error> {
        match value {
            1 => ::std::option::Option::Some(WebPushResult_Error::Unspecified),
            2 => ::std::option::Option::Some(WebPushResult_Error::Unauthorized),
            3 => ::std::option::Option::Some(WebPushResult_Error::BadRequest),
            4 => ::std::option::Option::Some(WebPushResult_Error::ServerError),
            5 => ::std::option::Option::Some(WebPushResult_Error::NotImplemented),
            6 => ::std::option::Option::Some(WebPushResult_Error::InvalidUri),
            7 => ::std::option::Option::Some(WebPushResult_Error::TimeoutError),
            8 => ::std::option::Option::Some(WebPushResult_Error::EndpointNotValid),
            9 => ::std::option::Option::Some(WebPushResult_Error::EndpointNotFound),
            10 => ::std::option::Option::Some(WebPushResult_Error::PayloadTooLarge),
            11 => ::std::option::Option::Some(WebPushResult_Error::TlsError),
            12 => ::std::option::Option::Some(WebPushResult_Error::InvalidPackageName),
            13 => ::std::option::Option::Some(WebPushResult_Error::InvalidTtl),
            14 => ::std::option::Option::Some(WebPushResult_Error::MissingCryptoKeys),
            15 => ::std::option::Option::Some(WebPushResult_Error::InvalidCryptoKeys),
            16 => ::std::option::Option::Some(WebPushResult_Error::InvalidResponse),
            17 => ::std::option::Option::Some(WebPushResult_Error::Other),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [WebPushResult_Error] = &[
            WebPushResult_Error::Unspecified,
            WebPushResult_Error::Unauthorized,
            WebPushResult_Error::BadRequest,
            WebPushResult_Error::ServerError,
            WebPushResult_Error::NotImplemented,
            WebPushResult_Error::InvalidUri,
            WebPushResult_Error::TimeoutError,
            WebPushResult_Error::EndpointNotValid,
            WebPushResult_Error::EndpointNotFound,
            WebPushResult_Error::PayloadTooLarge,
            WebPushResult_Error::TlsError,
            WebPushResult_Error::InvalidPackageName,
            WebPushResult_Error::InvalidTtl,
            WebPushResult_Error::MissingCryptoKeys,
            WebPushResult_Error::InvalidCryptoKeys,
            WebPushResult_Error::InvalidResponse,
            WebPushResult_Error::Other,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("WebPushResult_Error", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for WebPushResult_Error {
}

impl ::protobuf::reflect::ProtobufValue for WebPushResult_Error {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WebPushNotification {
    // message fields
    response: ::protobuf::SingularPtrField<WebPushResult>,
    auth: ::protobuf::SingularField<::std::string::String>,
    p256dh: ::protobuf::SingularField<::std::string::String>,
    payload: ::protobuf::SingularField<::std::string::String>,
    ttl: ::std::option::Option<i64>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl WebPushNotification {
    pub fn new() -> WebPushNotification {
        ::std::default::Default::default()
    }

    // optional .notification.WebPushResult response = 1;

    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: WebPushResult) {
        self.response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response(&mut self) -> &mut WebPushResult {
        if self.response.is_none() {
            self.response.set_default();
        }
        self.response.as_mut().unwrap()
    }

    // Take field
    pub fn take_response(&mut self) -> WebPushResult {
        self.response.take().unwrap_or_else(|| WebPushResult::new())
    }

    pub fn get_response(&self) -> &WebPushResult {
        self.response.as_ref().unwrap_or_else(|| WebPushResult::default_instance())
    }

    // required string auth = 2;

    pub fn clear_auth(&mut self) {
        self.auth.clear();
    }

    pub fn has_auth(&self) -> bool {
        self.auth.is_some()
    }

    // Param is passed by value, moved
    pub fn set_auth(&mut self, v: ::std::string::String) {
        self.auth = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_auth(&mut self) -> &mut ::std::string::String {
        if self.auth.is_none() {
            self.auth.set_default();
        }
        self.auth.as_mut().unwrap()
    }

    // Take field
    pub fn take_auth(&mut self) -> ::std::string::String {
        self.auth.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_auth(&self) -> &str {
        match self.auth.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // required string p256dh = 3;

    pub fn clear_p256dh(&mut self) {
        self.p256dh.clear();
    }

    pub fn has_p256dh(&self) -> bool {
        self.p256dh.is_some()
    }

    // Param is passed by value, moved
    pub fn set_p256dh(&mut self, v: ::std::string::String) {
        self.p256dh = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_p256dh(&mut self) -> &mut ::std::string::String {
        if self.p256dh.is_none() {
            self.p256dh.set_default();
        }
        self.p256dh.as_mut().unwrap()
    }

    // Take field
    pub fn take_p256dh(&mut self) -> ::std::string::String {
        self.p256dh.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_p256dh(&self) -> &str {
        match self.p256dh.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional string payload = 4;

    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    pub fn has_payload(&self) -> bool {
        self.payload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::string::String) {
        self.payload = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::string::String {
        if self.payload.is_none() {
            self.payload.set_default();
        }
        self.payload.as_mut().unwrap()
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::string::String {
        self.payload.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_payload(&self) -> &str {
        match self.payload.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional int64 ttl = 5;

    pub fn clear_ttl(&mut self) {
        self.ttl = ::std::option::Option::None;
    }

    pub fn has_ttl(&self) -> bool {
        self.ttl.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ttl(&mut self, v: i64) {
        self.ttl = ::std::option::Option::Some(v);
    }

    pub fn get_ttl(&self) -> i64 {
        self.ttl.unwrap_or(0)
    }
}

impl ::protobuf::Message for WebPushNotification {
    fn is_initialized(&self) -> bool {
        if self.auth.is_none() {
            return false;
        }
        if self.p256dh.is_none() {
            return false;
        }
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.auth)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.p256dh)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.payload)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ttl = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.auth.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.p256dh.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(ref v) = self.payload.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.ttl {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.response.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.auth.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.p256dh.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(ref v) = self.payload.as_ref() {
            os.write_string(4, &v)?;
        }
        if let Some(v) = self.ttl {
            os.write_int64(5, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WebPushNotification {
        WebPushNotification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<WebPushResult>>(
                    "response",
                    |m: &WebPushNotification| { &m.response },
                    |m: &mut WebPushNotification| { &mut m.response },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "auth",
                    |m: &WebPushNotification| { &m.auth },
                    |m: &mut WebPushNotification| { &mut m.auth },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "p256dh",
                    |m: &WebPushNotification| { &m.p256dh },
                    |m: &mut WebPushNotification| { &mut m.p256dh },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "payload",
                    |m: &WebPushNotification| { &m.payload },
                    |m: &mut WebPushNotification| { &mut m.payload },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "ttl",
                    |m: &WebPushNotification| { &m.ttl },
                    |m: &mut WebPushNotification| { &mut m.ttl },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<WebPushNotification>(
                    "WebPushNotification",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WebPushNotification {
        static mut instance: ::protobuf::lazy::Lazy<WebPushNotification> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const WebPushNotification,
        };
        unsafe {
            instance.get(WebPushNotification::new)
        }
    }
}

impl ::protobuf::Clear for WebPushNotification {
    fn clear(&mut self) {
        self.clear_response();
        self.clear_auth();
        self.clear_p256dh();
        self.clear_payload();
        self.clear_ttl();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WebPushNotification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WebPushNotification {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'notification/webpush_notification.proto\x12\x0cnotification\x1a\x1cco\
    mmon/map_field_entry.proto\"\x9e\x03\n\rWebPushResult\x12\x12\n\nsuccess\
    ful\x18\x01\x20\x02(\x08\x120\n\x05error\x18\x02\x20\x01(\x0e2!.notifica\
    tion.WebPushResult.Error\"\xc6\x02\n\x05Error\x12\x0f\n\x0bUnspecified\
    \x10\x01\x12\x10\n\x0cUnauthorized\x10\x02\x12\x0e\n\nBadRequest\x10\x03\
    \x12\x0f\n\x0bServerError\x10\x04\x12\x12\n\x0eNotImplemented\x10\x05\
    \x12\x0e\n\nInvalidUri\x10\x06\x12\x10\n\x0cTimeoutError\x10\x07\x12\x14\
    \n\x10EndpointNotValid\x10\x08\x12\x14\n\x10EndpointNotFound\x10\t\x12\
    \x13\n\x0fPayloadTooLarge\x10\n\x12\x0c\n\x08TlsError\x10\x0b\x12\x16\n\
    \x12InvalidPackageName\x10\x0c\x12\x0e\n\nInvalidTtl\x10\r\x12\x15\n\x11\
    MissingCryptoKeys\x10\x0e\x12\x15\n\x11InvalidCryptoKeys\x10\x0f\x12\x13\
    \n\x0fInvalidResponse\x10\x10\x12\t\n\x05Other\x10\x11\"\x80\x01\n\x13We\
    bPushNotification\x12-\n\x08response\x18\x01\x20\x01(\x0b2\x1b.notificat\
    ion.WebPushResult\x12\x0c\n\x04auth\x18\x02\x20\x02(\t\x12\x0e\n\x06p256\
    dh\x18\x03\x20\x02(\t\x12\x0f\n\x07payload\x18\x04\x20\x01(\t\x12\x0b\n\
    \x03ttl\x18\x05\x20\x01(\x03\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
