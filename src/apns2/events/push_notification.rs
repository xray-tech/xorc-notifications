// This file is generated by rust-protobuf 2.0.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct PushNotification {
    // message fields
    header: ::protobuf::SingularPtrField<super::header::Header>,
    device_token: ::protobuf::SingularField<::std::string::String>,
    application_id: ::protobuf::SingularField<::std::string::String>,
    correlation_id: ::protobuf::SingularField<::std::string::String>,
    retry_count: ::std::option::Option<u32>,
    retry_after: ::std::option::Option<u32>,
    campaign_id: ::protobuf::SingularField<::std::string::String>,
    exchange: ::protobuf::SingularField<::std::string::String>,
    response_recipient_id: ::protobuf::SingularField<::std::string::String>,
    universe: ::protobuf::SingularField<::std::string::String>,
    // message oneof groups
    pub field_type: ::std::option::Option<PushNotification_oneof_type>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum PushNotification_oneof_type {
    apple(super::apple_notification::AppleNotification),
    google(super::google_notification::GoogleNotification),
    web(super::webpush_notification::WebPushNotification),
}

impl PushNotification {
    pub fn new() -> PushNotification {
        ::std::default::Default::default()
    }

    // required .common.Header header = 1;

    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: super::header::Header) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut super::header::Header {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> super::header::Header {
        self.header.take().unwrap_or_else(|| super::header::Header::new())
    }

    pub fn get_header(&self) -> &super::header::Header {
        self.header.as_ref().unwrap_or_else(|| super::header::Header::default_instance())
    }

    // required string device_token = 2;

    pub fn clear_device_token(&mut self) {
        self.device_token.clear();
    }

    pub fn has_device_token(&self) -> bool {
        self.device_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_token(&mut self, v: ::std::string::String) {
        self.device_token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_token(&mut self) -> &mut ::std::string::String {
        if self.device_token.is_none() {
            self.device_token.set_default();
        }
        self.device_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_device_token(&mut self) -> ::std::string::String {
        self.device_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_device_token(&self) -> &str {
        match self.device_token.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // required string application_id = 3;

    pub fn clear_application_id(&mut self) {
        self.application_id.clear();
    }

    pub fn has_application_id(&self) -> bool {
        self.application_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_application_id(&mut self, v: ::std::string::String) {
        self.application_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_application_id(&mut self) -> &mut ::std::string::String {
        if self.application_id.is_none() {
            self.application_id.set_default();
        }
        self.application_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_application_id(&mut self) -> ::std::string::String {
        self.application_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_application_id(&self) -> &str {
        match self.application_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // required string correlation_id = 4;

    pub fn clear_correlation_id(&mut self) {
        self.correlation_id.clear();
    }

    pub fn has_correlation_id(&self) -> bool {
        self.correlation_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_correlation_id(&mut self, v: ::std::string::String) {
        self.correlation_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_correlation_id(&mut self) -> &mut ::std::string::String {
        if self.correlation_id.is_none() {
            self.correlation_id.set_default();
        }
        self.correlation_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_correlation_id(&mut self) -> ::std::string::String {
        self.correlation_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_correlation_id(&self) -> &str {
        match self.correlation_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional .notification.AppleNotification apple = 5;

    pub fn clear_apple(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_apple(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(PushNotification_oneof_type::apple(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_apple(&mut self, v: super::apple_notification::AppleNotification) {
        self.field_type = ::std::option::Option::Some(PushNotification_oneof_type::apple(v))
    }

    // Mutable pointer to the field.
    pub fn mut_apple(&mut self) -> &mut super::apple_notification::AppleNotification {
        if let ::std::option::Option::Some(PushNotification_oneof_type::apple(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(PushNotification_oneof_type::apple(super::apple_notification::AppleNotification::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(PushNotification_oneof_type::apple(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_apple(&mut self) -> super::apple_notification::AppleNotification {
        if self.has_apple() {
            match self.field_type.take() {
                ::std::option::Option::Some(PushNotification_oneof_type::apple(v)) => v,
                _ => panic!(),
            }
        } else {
            super::apple_notification::AppleNotification::new()
        }
    }

    pub fn get_apple(&self) -> &super::apple_notification::AppleNotification {
        match self.field_type {
            ::std::option::Option::Some(PushNotification_oneof_type::apple(ref v)) => v,
            _ => super::apple_notification::AppleNotification::default_instance(),
        }
    }

    // optional .notification.GoogleNotification google = 6;

    pub fn clear_google(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_google(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(PushNotification_oneof_type::google(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_google(&mut self, v: super::google_notification::GoogleNotification) {
        self.field_type = ::std::option::Option::Some(PushNotification_oneof_type::google(v))
    }

    // Mutable pointer to the field.
    pub fn mut_google(&mut self) -> &mut super::google_notification::GoogleNotification {
        if let ::std::option::Option::Some(PushNotification_oneof_type::google(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(PushNotification_oneof_type::google(super::google_notification::GoogleNotification::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(PushNotification_oneof_type::google(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_google(&mut self) -> super::google_notification::GoogleNotification {
        if self.has_google() {
            match self.field_type.take() {
                ::std::option::Option::Some(PushNotification_oneof_type::google(v)) => v,
                _ => panic!(),
            }
        } else {
            super::google_notification::GoogleNotification::new()
        }
    }

    pub fn get_google(&self) -> &super::google_notification::GoogleNotification {
        match self.field_type {
            ::std::option::Option::Some(PushNotification_oneof_type::google(ref v)) => v,
            _ => super::google_notification::GoogleNotification::default_instance(),
        }
    }

    // optional .notification.WebPushNotification web = 9;

    pub fn clear_web(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_web(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(PushNotification_oneof_type::web(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_web(&mut self, v: super::webpush_notification::WebPushNotification) {
        self.field_type = ::std::option::Option::Some(PushNotification_oneof_type::web(v))
    }

    // Mutable pointer to the field.
    pub fn mut_web(&mut self) -> &mut super::webpush_notification::WebPushNotification {
        if let ::std::option::Option::Some(PushNotification_oneof_type::web(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(PushNotification_oneof_type::web(super::webpush_notification::WebPushNotification::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(PushNotification_oneof_type::web(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_web(&mut self) -> super::webpush_notification::WebPushNotification {
        if self.has_web() {
            match self.field_type.take() {
                ::std::option::Option::Some(PushNotification_oneof_type::web(v)) => v,
                _ => panic!(),
            }
        } else {
            super::webpush_notification::WebPushNotification::new()
        }
    }

    pub fn get_web(&self) -> &super::webpush_notification::WebPushNotification {
        match self.field_type {
            ::std::option::Option::Some(PushNotification_oneof_type::web(ref v)) => v,
            _ => super::webpush_notification::WebPushNotification::default_instance(),
        }
    }

    // optional uint32 retry_count = 7;

    pub fn clear_retry_count(&mut self) {
        self.retry_count = ::std::option::Option::None;
    }

    pub fn has_retry_count(&self) -> bool {
        self.retry_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_retry_count(&mut self, v: u32) {
        self.retry_count = ::std::option::Option::Some(v);
    }

    pub fn get_retry_count(&self) -> u32 {
        self.retry_count.unwrap_or(0)
    }

    // optional uint32 retry_after = 8;

    pub fn clear_retry_after(&mut self) {
        self.retry_after = ::std::option::Option::None;
    }

    pub fn has_retry_after(&self) -> bool {
        self.retry_after.is_some()
    }

    // Param is passed by value, moved
    pub fn set_retry_after(&mut self, v: u32) {
        self.retry_after = ::std::option::Option::Some(v);
    }

    pub fn get_retry_after(&self) -> u32 {
        self.retry_after.unwrap_or(0)
    }

    // optional string campaign_id = 10;

    pub fn clear_campaign_id(&mut self) {
        self.campaign_id.clear();
    }

    pub fn has_campaign_id(&self) -> bool {
        self.campaign_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_campaign_id(&mut self, v: ::std::string::String) {
        self.campaign_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_campaign_id(&mut self) -> &mut ::std::string::String {
        if self.campaign_id.is_none() {
            self.campaign_id.set_default();
        }
        self.campaign_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_campaign_id(&mut self) -> ::std::string::String {
        self.campaign_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_campaign_id(&self) -> &str {
        match self.campaign_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional string exchange = 11;

    pub fn clear_exchange(&mut self) {
        self.exchange.clear();
    }

    pub fn has_exchange(&self) -> bool {
        self.exchange.is_some()
    }

    // Param is passed by value, moved
    pub fn set_exchange(&mut self, v: ::std::string::String) {
        self.exchange = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_exchange(&mut self) -> &mut ::std::string::String {
        if self.exchange.is_none() {
            self.exchange.set_default();
        }
        self.exchange.as_mut().unwrap()
    }

    // Take field
    pub fn take_exchange(&mut self) -> ::std::string::String {
        self.exchange.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_exchange(&self) -> &str {
        match self.exchange.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional string response_recipient_id = 12;

    pub fn clear_response_recipient_id(&mut self) {
        self.response_recipient_id.clear();
    }

    pub fn has_response_recipient_id(&self) -> bool {
        self.response_recipient_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response_recipient_id(&mut self, v: ::std::string::String) {
        self.response_recipient_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response_recipient_id(&mut self) -> &mut ::std::string::String {
        if self.response_recipient_id.is_none() {
            self.response_recipient_id.set_default();
        }
        self.response_recipient_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_response_recipient_id(&mut self) -> ::std::string::String {
        self.response_recipient_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_response_recipient_id(&self) -> &str {
        match self.response_recipient_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional string universe = 13;

    pub fn clear_universe(&mut self) {
        self.universe.clear();
    }

    pub fn has_universe(&self) -> bool {
        self.universe.is_some()
    }

    // Param is passed by value, moved
    pub fn set_universe(&mut self, v: ::std::string::String) {
        self.universe = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_universe(&mut self) -> &mut ::std::string::String {
        if self.universe.is_none() {
            self.universe.set_default();
        }
        self.universe.as_mut().unwrap()
    }

    // Take field
    pub fn take_universe(&mut self) -> ::std::string::String {
        self.universe.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_universe(&self) -> &str {
        match self.universe.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
}

impl ::protobuf::Message for PushNotification {
    fn is_initialized(&self) -> bool {
        if self.header.is_none() {
            return false;
        }
        if self.device_token.is_none() {
            return false;
        }
        if self.application_id.is_none() {
            return false;
        }
        if self.correlation_id.is_none() {
            return false;
        }
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(PushNotification_oneof_type::apple(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(PushNotification_oneof_type::google(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(PushNotification_oneof_type::web(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.device_token)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.application_id)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.correlation_id)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(PushNotification_oneof_type::apple(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(PushNotification_oneof_type::google(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(PushNotification_oneof_type::web(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.retry_count = ::std::option::Option::Some(tmp);
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.retry_after = ::std::option::Option::Some(tmp);
                },
                10 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.campaign_id)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.exchange)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.response_recipient_id)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.universe)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.device_token.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.application_id.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(ref v) = self.correlation_id.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.retry_count {
            my_size += ::protobuf::rt::value_size(7, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.retry_after {
            my_size += ::protobuf::rt::value_size(8, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.campaign_id.as_ref() {
            my_size += ::protobuf::rt::string_size(10, &v);
        }
        if let Some(ref v) = self.exchange.as_ref() {
            my_size += ::protobuf::rt::string_size(11, &v);
        }
        if let Some(ref v) = self.response_recipient_id.as_ref() {
            my_size += ::protobuf::rt::string_size(12, &v);
        }
        if let Some(ref v) = self.universe.as_ref() {
            my_size += ::protobuf::rt::string_size(13, &v);
        }
        if let ::std::option::Option::Some(ref v) = self.field_type {
            match v {
                &PushNotification_oneof_type::apple(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &PushNotification_oneof_type::google(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &PushNotification_oneof_type::web(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.device_token.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.application_id.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(ref v) = self.correlation_id.as_ref() {
            os.write_string(4, &v)?;
        }
        if let Some(v) = self.retry_count {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.retry_after {
            os.write_uint32(8, v)?;
        }
        if let Some(ref v) = self.campaign_id.as_ref() {
            os.write_string(10, &v)?;
        }
        if let Some(ref v) = self.exchange.as_ref() {
            os.write_string(11, &v)?;
        }
        if let Some(ref v) = self.response_recipient_id.as_ref() {
            os.write_string(12, &v)?;
        }
        if let Some(ref v) = self.universe.as_ref() {
            os.write_string(13, &v)?;
        }
        if let ::std::option::Option::Some(ref v) = self.field_type {
            match v {
                &PushNotification_oneof_type::apple(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &PushNotification_oneof_type::google(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &PushNotification_oneof_type::web(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PushNotification {
        PushNotification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::header::Header>>(
                    "header",
                    |m: &PushNotification| { &m.header },
                    |m: &mut PushNotification| { &mut m.header },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "device_token",
                    |m: &PushNotification| { &m.device_token },
                    |m: &mut PushNotification| { &mut m.device_token },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "application_id",
                    |m: &PushNotification| { &m.application_id },
                    |m: &mut PushNotification| { &mut m.application_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "correlation_id",
                    |m: &PushNotification| { &m.correlation_id },
                    |m: &mut PushNotification| { &mut m.correlation_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::apple_notification::AppleNotification>(
                    "apple",
                    PushNotification::has_apple,
                    PushNotification::get_apple,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::google_notification::GoogleNotification>(
                    "google",
                    PushNotification::has_google,
                    PushNotification::get_google,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::webpush_notification::WebPushNotification>(
                    "web",
                    PushNotification::has_web,
                    PushNotification::get_web,
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "retry_count",
                    |m: &PushNotification| { &m.retry_count },
                    |m: &mut PushNotification| { &mut m.retry_count },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "retry_after",
                    |m: &PushNotification| { &m.retry_after },
                    |m: &mut PushNotification| { &mut m.retry_after },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "campaign_id",
                    |m: &PushNotification| { &m.campaign_id },
                    |m: &mut PushNotification| { &mut m.campaign_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "exchange",
                    |m: &PushNotification| { &m.exchange },
                    |m: &mut PushNotification| { &mut m.exchange },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "response_recipient_id",
                    |m: &PushNotification| { &m.response_recipient_id },
                    |m: &mut PushNotification| { &mut m.response_recipient_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "universe",
                    |m: &PushNotification| { &m.universe },
                    |m: &mut PushNotification| { &mut m.universe },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PushNotification>(
                    "PushNotification",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PushNotification {
        static mut instance: ::protobuf::lazy::Lazy<PushNotification> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PushNotification,
        };
        unsafe {
            instance.get(PushNotification::new)
        }
    }
}

impl ::protobuf::Clear for PushNotification {
    fn clear(&mut self) {
        self.clear_header();
        self.clear_device_token();
        self.clear_application_id();
        self.clear_correlation_id();
        self.clear_apple();
        self.clear_google();
        self.clear_web();
        self.clear_retry_count();
        self.clear_retry_after();
        self.clear_campaign_id();
        self.clear_exchange();
        self.clear_response_recipient_id();
        self.clear_universe();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PushNotification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PushNotification {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$notification/push_notification.proto\x12\x0cnotification\x1a%notifica\
    tion/apple_notification.proto\x1a&notification/google_notification.proto\
    \x1a'notification/webpush_notification.proto\x1a\x13common/header.proto\
    \"\x9a\x03\n\x10PushNotification\x12\x1e\n\x06header\x18\x01\x20\x02(\
    \x0b2\x0e.common.Header\x12\x14\n\x0cdevice_token\x18\x02\x20\x02(\t\x12\
    \x16\n\x0eapplication_id\x18\x03\x20\x02(\t\x12\x16\n\x0ecorrelation_id\
    \x18\x04\x20\x02(\t\x120\n\x05apple\x18\x05\x20\x01(\x0b2\x1f.notificati\
    on.AppleNotificationH\0\x122\n\x06google\x18\x06\x20\x01(\x0b2\x20.notif\
    ication.GoogleNotificationH\0\x120\n\x03web\x18\t\x20\x01(\x0b2!.notific\
    ation.WebPushNotificationH\0\x12\x13\n\x0bretry_count\x18\x07\x20\x01(\r\
    \x12\x13\n\x0bretry_after\x18\x08\x20\x01(\r\x12\x13\n\x0bcampaign_id\
    \x18\n\x20\x01(\t\x12\x10\n\x08exchange\x18\x0b\x20\x01(\t\x12\x1d\n\x15\
    response_recipient_id\x18\x0c\x20\x01(\t\x12\x10\n\x08universe\x18\r\x20\
    \x01(\tB\x06\n\x04type\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
