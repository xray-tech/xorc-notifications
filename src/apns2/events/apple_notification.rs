// This file is generated by rust-protobuf 2.0.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct ApnsHeaders {
    // message fields
    apns_expiration: ::std::option::Option<i64>,
    apns_priority: ::std::option::Option<u32>,
    apns_topic: ::protobuf::SingularField<::std::string::String>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApnsHeaders {
    pub fn new() -> ApnsHeaders {
        ::std::default::Default::default()
    }

    // optional int64 apns_expiration = 4;

    pub fn clear_apns_expiration(&mut self) {
        self.apns_expiration = ::std::option::Option::None;
    }

    pub fn has_apns_expiration(&self) -> bool {
        self.apns_expiration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_apns_expiration(&mut self, v: i64) {
        self.apns_expiration = ::std::option::Option::Some(v);
    }

    pub fn get_apns_expiration(&self) -> i64 {
        self.apns_expiration.unwrap_or(0)
    }

    // optional uint32 apns_priority = 5;

    pub fn clear_apns_priority(&mut self) {
        self.apns_priority = ::std::option::Option::None;
    }

    pub fn has_apns_priority(&self) -> bool {
        self.apns_priority.is_some()
    }

    // Param is passed by value, moved
    pub fn set_apns_priority(&mut self, v: u32) {
        self.apns_priority = ::std::option::Option::Some(v);
    }

    pub fn get_apns_priority(&self) -> u32 {
        self.apns_priority.unwrap_or(0)
    }

    // optional string apns_topic = 6;

    pub fn clear_apns_topic(&mut self) {
        self.apns_topic.clear();
    }

    pub fn has_apns_topic(&self) -> bool {
        self.apns_topic.is_some()
    }

    // Param is passed by value, moved
    pub fn set_apns_topic(&mut self, v: ::std::string::String) {
        self.apns_topic = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_apns_topic(&mut self) -> &mut ::std::string::String {
        if self.apns_topic.is_none() {
            self.apns_topic.set_default();
        }
        self.apns_topic.as_mut().unwrap()
    }

    // Take field
    pub fn take_apns_topic(&mut self) -> ::std::string::String {
        self.apns_topic.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_apns_topic(&self) -> &str {
        match self.apns_topic.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
}

impl ::protobuf::Message for ApnsHeaders {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.apns_expiration = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.apns_priority = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.apns_topic)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.apns_expiration {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.apns_priority {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.apns_topic.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.apns_expiration {
            os.write_int64(4, v)?;
        }
        if let Some(v) = self.apns_priority {
            os.write_uint32(5, v)?;
        }
        if let Some(ref v) = self.apns_topic.as_ref() {
            os.write_string(6, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApnsHeaders {
        ApnsHeaders::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "apns_expiration",
                    |m: &ApnsHeaders| { &m.apns_expiration },
                    |m: &mut ApnsHeaders| { &mut m.apns_expiration },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "apns_priority",
                    |m: &ApnsHeaders| { &m.apns_priority },
                    |m: &mut ApnsHeaders| { &mut m.apns_priority },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "apns_topic",
                    |m: &ApnsHeaders| { &m.apns_topic },
                    |m: &mut ApnsHeaders| { &mut m.apns_topic },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApnsHeaders>(
                    "ApnsHeaders",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApnsHeaders {
        static mut instance: ::protobuf::lazy::Lazy<ApnsHeaders> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApnsHeaders,
        };
        unsafe {
            instance.get(ApnsHeaders::new)
        }
    }
}

impl ::protobuf::Clear for ApnsHeaders {
    fn clear(&mut self) {
        self.clear_apns_expiration();
        self.clear_apns_priority();
        self.clear_apns_topic();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApnsHeaders {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApnsHeaders {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApnsResult {
    // message fields
    successful: ::std::option::Option<bool>,
    status: ::std::option::Option<ApnsResult_Status>,
    reason: ::std::option::Option<ApnsResult_Reason>,
    timestamp: ::std::option::Option<i64>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApnsResult {
    pub fn new() -> ApnsResult {
        ::std::default::Default::default()
    }

    // required bool successful = 1;

    pub fn clear_successful(&mut self) {
        self.successful = ::std::option::Option::None;
    }

    pub fn has_successful(&self) -> bool {
        self.successful.is_some()
    }

    // Param is passed by value, moved
    pub fn set_successful(&mut self, v: bool) {
        self.successful = ::std::option::Option::Some(v);
    }

    pub fn get_successful(&self) -> bool {
        self.successful.unwrap_or(false)
    }

    // optional .notification.ApnsResult.Status status = 2;

    pub fn clear_status(&mut self) {
        self.status = ::std::option::Option::None;
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ApnsResult_Status) {
        self.status = ::std::option::Option::Some(v);
    }

    pub fn get_status(&self) -> ApnsResult_Status {
        self.status.unwrap_or(ApnsResult_Status::Success)
    }

    // optional .notification.ApnsResult.Reason reason = 3;

    pub fn clear_reason(&mut self) {
        self.reason = ::std::option::Option::None;
    }

    pub fn has_reason(&self) -> bool {
        self.reason.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reason(&mut self, v: ApnsResult_Reason) {
        self.reason = ::std::option::Option::Some(v);
    }

    pub fn get_reason(&self) -> ApnsResult_Reason {
        self.reason.unwrap_or(ApnsResult_Reason::PayloadEmpty)
    }

    // optional int64 timestamp = 4;

    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i64) {
        self.timestamp = ::std::option::Option::Some(v);
    }

    pub fn get_timestamp(&self) -> i64 {
        self.timestamp.unwrap_or(0)
    }
}

impl ::protobuf::Message for ApnsResult {
    fn is_initialized(&self) -> bool {
        if self.successful.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.successful = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.reason, 3, &mut self.unknown_fields)?
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timestamp = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.successful {
            my_size += 2;
        }
        if let Some(v) = self.status {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        if let Some(v) = self.reason {
            my_size += ::protobuf::rt::enum_size(3, v);
        }
        if let Some(v) = self.timestamp {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.successful {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.status {
            os.write_enum(2, v.value())?;
        }
        if let Some(v) = self.reason {
            os.write_enum(3, v.value())?;
        }
        if let Some(v) = self.timestamp {
            os.write_int64(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApnsResult {
        ApnsResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "successful",
                    |m: &ApnsResult| { &m.successful },
                    |m: &mut ApnsResult| { &mut m.successful },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ApnsResult_Status>>(
                    "status",
                    |m: &ApnsResult| { &m.status },
                    |m: &mut ApnsResult| { &mut m.status },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ApnsResult_Reason>>(
                    "reason",
                    |m: &ApnsResult| { &m.reason },
                    |m: &mut ApnsResult| { &mut m.reason },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "timestamp",
                    |m: &ApnsResult| { &m.timestamp },
                    |m: &mut ApnsResult| { &mut m.timestamp },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApnsResult>(
                    "ApnsResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApnsResult {
        static mut instance: ::protobuf::lazy::Lazy<ApnsResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApnsResult,
        };
        unsafe {
            instance.get(ApnsResult::new)
        }
    }
}

impl ::protobuf::Clear for ApnsResult {
    fn clear(&mut self) {
        self.clear_successful();
        self.clear_status();
        self.clear_reason();
        self.clear_timestamp();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApnsResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApnsResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ApnsResult_Status {
    Success = 0,
    BadRequest = 1,
    Error = 2,
    MissingChannel = 3,
    Timeout = 4,
    Unknown = 5,
    Unregistered = 6,
    Forbidden = 7,
    MethodNotAllowed = 8,
    PayloadTooLarge = 9,
    TooManyRequests = 10,
}

impl ::protobuf::ProtobufEnum for ApnsResult_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ApnsResult_Status> {
        match value {
            0 => ::std::option::Option::Some(ApnsResult_Status::Success),
            1 => ::std::option::Option::Some(ApnsResult_Status::BadRequest),
            2 => ::std::option::Option::Some(ApnsResult_Status::Error),
            3 => ::std::option::Option::Some(ApnsResult_Status::MissingChannel),
            4 => ::std::option::Option::Some(ApnsResult_Status::Timeout),
            5 => ::std::option::Option::Some(ApnsResult_Status::Unknown),
            6 => ::std::option::Option::Some(ApnsResult_Status::Unregistered),
            7 => ::std::option::Option::Some(ApnsResult_Status::Forbidden),
            8 => ::std::option::Option::Some(ApnsResult_Status::MethodNotAllowed),
            9 => ::std::option::Option::Some(ApnsResult_Status::PayloadTooLarge),
            10 => ::std::option::Option::Some(ApnsResult_Status::TooManyRequests),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ApnsResult_Status] = &[
            ApnsResult_Status::Success,
            ApnsResult_Status::BadRequest,
            ApnsResult_Status::Error,
            ApnsResult_Status::MissingChannel,
            ApnsResult_Status::Timeout,
            ApnsResult_Status::Unknown,
            ApnsResult_Status::Unregistered,
            ApnsResult_Status::Forbidden,
            ApnsResult_Status::MethodNotAllowed,
            ApnsResult_Status::PayloadTooLarge,
            ApnsResult_Status::TooManyRequests,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ApnsResult_Status", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ApnsResult_Status {
}

impl ::protobuf::reflect::ProtobufValue for ApnsResult_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ApnsResult_Reason {
    PayloadEmpty = 0,
    BadTopic = 2,
    TopicDisallowed = 3,
    BadMessageId = 4,
    BadExpirationDate = 5,
    BadPriority = 6,
    MissingDeviceToken = 7,
    BadDeviceToken = 8,
    DeviceTokenNotForTopic = 9,
    DuplicateHeaders = 11,
    BadCertificateEnvironment = 12,
    BadCertificate = 13,
    BadPath = 15,
    IdleTimeout = 18,
    Shutdown = 19,
    InternalServerError = 20,
    ServiceUnavailable = 21,
    MissingTopic = 22,
    MissingCertificate = 23,
    InvalidProviderToken = 24,
    MissingProviderToken = 25,
    ExpiredProviderToken = 26,
    Nothing = 27,
}

impl ::protobuf::ProtobufEnum for ApnsResult_Reason {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ApnsResult_Reason> {
        match value {
            0 => ::std::option::Option::Some(ApnsResult_Reason::PayloadEmpty),
            2 => ::std::option::Option::Some(ApnsResult_Reason::BadTopic),
            3 => ::std::option::Option::Some(ApnsResult_Reason::TopicDisallowed),
            4 => ::std::option::Option::Some(ApnsResult_Reason::BadMessageId),
            5 => ::std::option::Option::Some(ApnsResult_Reason::BadExpirationDate),
            6 => ::std::option::Option::Some(ApnsResult_Reason::BadPriority),
            7 => ::std::option::Option::Some(ApnsResult_Reason::MissingDeviceToken),
            8 => ::std::option::Option::Some(ApnsResult_Reason::BadDeviceToken),
            9 => ::std::option::Option::Some(ApnsResult_Reason::DeviceTokenNotForTopic),
            11 => ::std::option::Option::Some(ApnsResult_Reason::DuplicateHeaders),
            12 => ::std::option::Option::Some(ApnsResult_Reason::BadCertificateEnvironment),
            13 => ::std::option::Option::Some(ApnsResult_Reason::BadCertificate),
            15 => ::std::option::Option::Some(ApnsResult_Reason::BadPath),
            18 => ::std::option::Option::Some(ApnsResult_Reason::IdleTimeout),
            19 => ::std::option::Option::Some(ApnsResult_Reason::Shutdown),
            20 => ::std::option::Option::Some(ApnsResult_Reason::InternalServerError),
            21 => ::std::option::Option::Some(ApnsResult_Reason::ServiceUnavailable),
            22 => ::std::option::Option::Some(ApnsResult_Reason::MissingTopic),
            23 => ::std::option::Option::Some(ApnsResult_Reason::MissingCertificate),
            24 => ::std::option::Option::Some(ApnsResult_Reason::InvalidProviderToken),
            25 => ::std::option::Option::Some(ApnsResult_Reason::MissingProviderToken),
            26 => ::std::option::Option::Some(ApnsResult_Reason::ExpiredProviderToken),
            27 => ::std::option::Option::Some(ApnsResult_Reason::Nothing),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ApnsResult_Reason] = &[
            ApnsResult_Reason::PayloadEmpty,
            ApnsResult_Reason::BadTopic,
            ApnsResult_Reason::TopicDisallowed,
            ApnsResult_Reason::BadMessageId,
            ApnsResult_Reason::BadExpirationDate,
            ApnsResult_Reason::BadPriority,
            ApnsResult_Reason::MissingDeviceToken,
            ApnsResult_Reason::BadDeviceToken,
            ApnsResult_Reason::DeviceTokenNotForTopic,
            ApnsResult_Reason::DuplicateHeaders,
            ApnsResult_Reason::BadCertificateEnvironment,
            ApnsResult_Reason::BadCertificate,
            ApnsResult_Reason::BadPath,
            ApnsResult_Reason::IdleTimeout,
            ApnsResult_Reason::Shutdown,
            ApnsResult_Reason::InternalServerError,
            ApnsResult_Reason::ServiceUnavailable,
            ApnsResult_Reason::MissingTopic,
            ApnsResult_Reason::MissingCertificate,
            ApnsResult_Reason::InvalidProviderToken,
            ApnsResult_Reason::MissingProviderToken,
            ApnsResult_Reason::ExpiredProviderToken,
            ApnsResult_Reason::Nothing,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ApnsResult_Reason", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ApnsResult_Reason {
}

impl ::protobuf::reflect::ProtobufValue for ApnsResult_Reason {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AppleLocalizedAlert {
    // message fields
    title: ::protobuf::SingularField<::std::string::String>,
    body: ::protobuf::SingularField<::std::string::String>,
    title_loc_key: ::protobuf::SingularField<::std::string::String>,
    title_loc_args: ::protobuf::RepeatedField<::std::string::String>,
    action_loc_key: ::protobuf::SingularField<::std::string::String>,
    loc_key: ::protobuf::SingularField<::std::string::String>,
    loc_args: ::protobuf::RepeatedField<::std::string::String>,
    launch_image: ::protobuf::SingularField<::std::string::String>,
    mutable_content: ::std::option::Option<bool>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl AppleLocalizedAlert {
    pub fn new() -> AppleLocalizedAlert {
        ::std::default::Default::default()
    }

    // required string title = 1;

    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    pub fn has_title(&self) -> bool {
        self.title.is_some()
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        if self.title.is_none() {
            self.title.set_default();
        }
        self.title.as_mut().unwrap()
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        self.title.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_title(&self) -> &str {
        match self.title.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // required string body = 2;

    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    pub fn has_body(&self) -> bool {
        self.body.is_some()
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ::std::string::String) {
        self.body = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ::std::string::String {
        if self.body.is_none() {
            self.body.set_default();
        }
        self.body.as_mut().unwrap()
    }

    // Take field
    pub fn take_body(&mut self) -> ::std::string::String {
        self.body.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_body(&self) -> &str {
        match self.body.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional string title_loc_key = 3;

    pub fn clear_title_loc_key(&mut self) {
        self.title_loc_key.clear();
    }

    pub fn has_title_loc_key(&self) -> bool {
        self.title_loc_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_title_loc_key(&mut self, v: ::std::string::String) {
        self.title_loc_key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title_loc_key(&mut self) -> &mut ::std::string::String {
        if self.title_loc_key.is_none() {
            self.title_loc_key.set_default();
        }
        self.title_loc_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_title_loc_key(&mut self) -> ::std::string::String {
        self.title_loc_key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_title_loc_key(&self) -> &str {
        match self.title_loc_key.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // repeated string title_loc_args = 4;

    pub fn clear_title_loc_args(&mut self) {
        self.title_loc_args.clear();
    }

    // Param is passed by value, moved
    pub fn set_title_loc_args(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.title_loc_args = v;
    }

    // Mutable pointer to the field.
    pub fn mut_title_loc_args(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.title_loc_args
    }

    // Take field
    pub fn take_title_loc_args(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.title_loc_args, ::protobuf::RepeatedField::new())
    }

    pub fn get_title_loc_args(&self) -> &[::std::string::String] {
        &self.title_loc_args
    }

    // optional string action_loc_key = 5;

    pub fn clear_action_loc_key(&mut self) {
        self.action_loc_key.clear();
    }

    pub fn has_action_loc_key(&self) -> bool {
        self.action_loc_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_action_loc_key(&mut self, v: ::std::string::String) {
        self.action_loc_key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_action_loc_key(&mut self) -> &mut ::std::string::String {
        if self.action_loc_key.is_none() {
            self.action_loc_key.set_default();
        }
        self.action_loc_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_action_loc_key(&mut self) -> ::std::string::String {
        self.action_loc_key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_action_loc_key(&self) -> &str {
        match self.action_loc_key.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional string loc_key = 6;

    pub fn clear_loc_key(&mut self) {
        self.loc_key.clear();
    }

    pub fn has_loc_key(&self) -> bool {
        self.loc_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_loc_key(&mut self, v: ::std::string::String) {
        self.loc_key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_loc_key(&mut self) -> &mut ::std::string::String {
        if self.loc_key.is_none() {
            self.loc_key.set_default();
        }
        self.loc_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_loc_key(&mut self) -> ::std::string::String {
        self.loc_key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_loc_key(&self) -> &str {
        match self.loc_key.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // repeated string loc_args = 7;

    pub fn clear_loc_args(&mut self) {
        self.loc_args.clear();
    }

    // Param is passed by value, moved
    pub fn set_loc_args(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.loc_args = v;
    }

    // Mutable pointer to the field.
    pub fn mut_loc_args(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.loc_args
    }

    // Take field
    pub fn take_loc_args(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.loc_args, ::protobuf::RepeatedField::new())
    }

    pub fn get_loc_args(&self) -> &[::std::string::String] {
        &self.loc_args
    }

    // optional string launch_image = 8;

    pub fn clear_launch_image(&mut self) {
        self.launch_image.clear();
    }

    pub fn has_launch_image(&self) -> bool {
        self.launch_image.is_some()
    }

    // Param is passed by value, moved
    pub fn set_launch_image(&mut self, v: ::std::string::String) {
        self.launch_image = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_launch_image(&mut self) -> &mut ::std::string::String {
        if self.launch_image.is_none() {
            self.launch_image.set_default();
        }
        self.launch_image.as_mut().unwrap()
    }

    // Take field
    pub fn take_launch_image(&mut self) -> ::std::string::String {
        self.launch_image.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_launch_image(&self) -> &str {
        match self.launch_image.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional bool mutable_content = 9;

    pub fn clear_mutable_content(&mut self) {
        self.mutable_content = ::std::option::Option::None;
    }

    pub fn has_mutable_content(&self) -> bool {
        self.mutable_content.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mutable_content(&mut self, v: bool) {
        self.mutable_content = ::std::option::Option::Some(v);
    }

    pub fn get_mutable_content(&self) -> bool {
        self.mutable_content.unwrap_or(false)
    }
}

impl ::protobuf::Message for AppleLocalizedAlert {
    fn is_initialized(&self) -> bool {
        if self.title.is_none() {
            return false;
        }
        if self.body.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.title)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.body)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.title_loc_key)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.title_loc_args)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.action_loc_key)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.loc_key)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.loc_args)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.launch_image)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.mutable_content = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.title.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.body.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.title_loc_key.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        for value in &self.title_loc_args {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if let Some(ref v) = self.action_loc_key.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(ref v) = self.loc_key.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        for value in &self.loc_args {
            my_size += ::protobuf::rt::string_size(7, &value);
        };
        if let Some(ref v) = self.launch_image.as_ref() {
            my_size += ::protobuf::rt::string_size(8, &v);
        }
        if let Some(v) = self.mutable_content {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.title.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.body.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.title_loc_key.as_ref() {
            os.write_string(3, &v)?;
        }
        for v in &self.title_loc_args {
            os.write_string(4, &v)?;
        };
        if let Some(ref v) = self.action_loc_key.as_ref() {
            os.write_string(5, &v)?;
        }
        if let Some(ref v) = self.loc_key.as_ref() {
            os.write_string(6, &v)?;
        }
        for v in &self.loc_args {
            os.write_string(7, &v)?;
        };
        if let Some(ref v) = self.launch_image.as_ref() {
            os.write_string(8, &v)?;
        }
        if let Some(v) = self.mutable_content {
            os.write_bool(9, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AppleLocalizedAlert {
        AppleLocalizedAlert::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "title",
                    |m: &AppleLocalizedAlert| { &m.title },
                    |m: &mut AppleLocalizedAlert| { &mut m.title },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "body",
                    |m: &AppleLocalizedAlert| { &m.body },
                    |m: &mut AppleLocalizedAlert| { &mut m.body },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "title_loc_key",
                    |m: &AppleLocalizedAlert| { &m.title_loc_key },
                    |m: &mut AppleLocalizedAlert| { &mut m.title_loc_key },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "title_loc_args",
                    |m: &AppleLocalizedAlert| { &m.title_loc_args },
                    |m: &mut AppleLocalizedAlert| { &mut m.title_loc_args },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "action_loc_key",
                    |m: &AppleLocalizedAlert| { &m.action_loc_key },
                    |m: &mut AppleLocalizedAlert| { &mut m.action_loc_key },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "loc_key",
                    |m: &AppleLocalizedAlert| { &m.loc_key },
                    |m: &mut AppleLocalizedAlert| { &mut m.loc_key },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "loc_args",
                    |m: &AppleLocalizedAlert| { &m.loc_args },
                    |m: &mut AppleLocalizedAlert| { &mut m.loc_args },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "launch_image",
                    |m: &AppleLocalizedAlert| { &m.launch_image },
                    |m: &mut AppleLocalizedAlert| { &mut m.launch_image },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "mutable_content",
                    |m: &AppleLocalizedAlert| { &m.mutable_content },
                    |m: &mut AppleLocalizedAlert| { &mut m.mutable_content },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AppleLocalizedAlert>(
                    "AppleLocalizedAlert",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AppleLocalizedAlert {
        static mut instance: ::protobuf::lazy::Lazy<AppleLocalizedAlert> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AppleLocalizedAlert,
        };
        unsafe {
            instance.get(AppleLocalizedAlert::new)
        }
    }
}

impl ::protobuf::Clear for AppleLocalizedAlert {
    fn clear(&mut self) {
        self.clear_title();
        self.clear_body();
        self.clear_title_loc_key();
        self.clear_title_loc_args();
        self.clear_action_loc_key();
        self.clear_loc_key();
        self.clear_loc_args();
        self.clear_launch_image();
        self.clear_mutable_content();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AppleLocalizedAlert {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AppleLocalizedAlert {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CustomData {
    // message fields
    key: ::protobuf::SingularField<::std::string::String>,
    body: ::protobuf::SingularField<::std::string::String>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl CustomData {
    pub fn new() -> CustomData {
        ::std::default::Default::default()
    }

    // required string key = 1;

    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        if self.key.is_none() {
            self.key.set_default();
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        self.key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_key(&self) -> &str {
        match self.key.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // required string body = 2;

    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    pub fn has_body(&self) -> bool {
        self.body.is_some()
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ::std::string::String) {
        self.body = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ::std::string::String {
        if self.body.is_none() {
            self.body.set_default();
        }
        self.body.as_mut().unwrap()
    }

    // Take field
    pub fn take_body(&mut self) -> ::std::string::String {
        self.body.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_body(&self) -> &str {
        match self.body.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
}

impl ::protobuf::Message for CustomData {
    fn is_initialized(&self) -> bool {
        if self.key.is_none() {
            return false;
        }
        if self.body.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.body)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.key.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.body.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.key.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.body.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CustomData {
        CustomData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "key",
                    |m: &CustomData| { &m.key },
                    |m: &mut CustomData| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "body",
                    |m: &CustomData| { &m.body },
                    |m: &mut CustomData| { &mut m.body },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CustomData>(
                    "CustomData",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CustomData {
        static mut instance: ::protobuf::lazy::Lazy<CustomData> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CustomData,
        };
        unsafe {
            instance.get(CustomData::new)
        }
    }
}

impl ::protobuf::Clear for CustomData {
    fn clear(&mut self) {
        self.clear_key();
        self.clear_body();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CustomData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CustomData {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AppleNotification {
    // message fields
    headers: ::protobuf::SingularPtrField<ApnsHeaders>,
    badge: ::std::option::Option<u32>,
    sound: ::protobuf::SingularField<::std::string::String>,
    category: ::protobuf::SingularField<::std::string::String>,
    result: ::protobuf::SingularPtrField<ApnsResult>,
    custom_data: ::protobuf::SingularPtrField<CustomData>,
    // message oneof groups
    pub field_type: ::std::option::Option<AppleNotification_oneof_type>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum AppleNotification_oneof_type {
    localized(AppleLocalizedAlert),
    plain(::std::string::String),
    silent(u32),
}

impl AppleNotification {
    pub fn new() -> AppleNotification {
        ::std::default::Default::default()
    }

    // optional .notification.ApnsHeaders headers = 1;

    pub fn clear_headers(&mut self) {
        self.headers.clear();
    }

    pub fn has_headers(&self) -> bool {
        self.headers.is_some()
    }

    // Param is passed by value, moved
    pub fn set_headers(&mut self, v: ApnsHeaders) {
        self.headers = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_headers(&mut self) -> &mut ApnsHeaders {
        if self.headers.is_none() {
            self.headers.set_default();
        }
        self.headers.as_mut().unwrap()
    }

    // Take field
    pub fn take_headers(&mut self) -> ApnsHeaders {
        self.headers.take().unwrap_or_else(|| ApnsHeaders::new())
    }

    pub fn get_headers(&self) -> &ApnsHeaders {
        self.headers.as_ref().unwrap_or_else(|| ApnsHeaders::default_instance())
    }

    // optional uint32 badge = 2;

    pub fn clear_badge(&mut self) {
        self.badge = ::std::option::Option::None;
    }

    pub fn has_badge(&self) -> bool {
        self.badge.is_some()
    }

    // Param is passed by value, moved
    pub fn set_badge(&mut self, v: u32) {
        self.badge = ::std::option::Option::Some(v);
    }

    pub fn get_badge(&self) -> u32 {
        self.badge.unwrap_or(0)
    }

    // optional string sound = 3;

    pub fn clear_sound(&mut self) {
        self.sound.clear();
    }

    pub fn has_sound(&self) -> bool {
        self.sound.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sound(&mut self, v: ::std::string::String) {
        self.sound = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sound(&mut self) -> &mut ::std::string::String {
        if self.sound.is_none() {
            self.sound.set_default();
        }
        self.sound.as_mut().unwrap()
    }

    // Take field
    pub fn take_sound(&mut self) -> ::std::string::String {
        self.sound.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_sound(&self) -> &str {
        match self.sound.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional string category = 4;

    pub fn clear_category(&mut self) {
        self.category.clear();
    }

    pub fn has_category(&self) -> bool {
        self.category.is_some()
    }

    // Param is passed by value, moved
    pub fn set_category(&mut self, v: ::std::string::String) {
        self.category = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_category(&mut self) -> &mut ::std::string::String {
        if self.category.is_none() {
            self.category.set_default();
        }
        self.category.as_mut().unwrap()
    }

    // Take field
    pub fn take_category(&mut self) -> ::std::string::String {
        self.category.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_category(&self) -> &str {
        match self.category.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional .notification.ApnsResult result = 5;

    pub fn clear_result(&mut self) {
        self.result.clear();
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ApnsResult) {
        self.result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_result(&mut self) -> &mut ApnsResult {
        if self.result.is_none() {
            self.result.set_default();
        }
        self.result.as_mut().unwrap()
    }

    // Take field
    pub fn take_result(&mut self) -> ApnsResult {
        self.result.take().unwrap_or_else(|| ApnsResult::new())
    }

    pub fn get_result(&self) -> &ApnsResult {
        self.result.as_ref().unwrap_or_else(|| ApnsResult::default_instance())
    }

    // optional .notification.AppleLocalizedAlert localized = 6;

    pub fn clear_localized(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_localized(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(AppleNotification_oneof_type::localized(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_localized(&mut self, v: AppleLocalizedAlert) {
        self.field_type = ::std::option::Option::Some(AppleNotification_oneof_type::localized(v))
    }

    // Mutable pointer to the field.
    pub fn mut_localized(&mut self) -> &mut AppleLocalizedAlert {
        if let ::std::option::Option::Some(AppleNotification_oneof_type::localized(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(AppleNotification_oneof_type::localized(AppleLocalizedAlert::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(AppleNotification_oneof_type::localized(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_localized(&mut self) -> AppleLocalizedAlert {
        if self.has_localized() {
            match self.field_type.take() {
                ::std::option::Option::Some(AppleNotification_oneof_type::localized(v)) => v,
                _ => panic!(),
            }
        } else {
            AppleLocalizedAlert::new()
        }
    }

    pub fn get_localized(&self) -> &AppleLocalizedAlert {
        match self.field_type {
            ::std::option::Option::Some(AppleNotification_oneof_type::localized(ref v)) => v,
            _ => AppleLocalizedAlert::default_instance(),
        }
    }

    // optional string plain = 7;

    pub fn clear_plain(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_plain(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(AppleNotification_oneof_type::plain(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_plain(&mut self, v: ::std::string::String) {
        self.field_type = ::std::option::Option::Some(AppleNotification_oneof_type::plain(v))
    }

    // Mutable pointer to the field.
    pub fn mut_plain(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(AppleNotification_oneof_type::plain(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(AppleNotification_oneof_type::plain(::std::string::String::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(AppleNotification_oneof_type::plain(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_plain(&mut self) -> ::std::string::String {
        if self.has_plain() {
            match self.field_type.take() {
                ::std::option::Option::Some(AppleNotification_oneof_type::plain(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    pub fn get_plain(&self) -> &str {
        match self.field_type {
            ::std::option::Option::Some(AppleNotification_oneof_type::plain(ref v)) => v,
            _ => "",
        }
    }

    // optional uint32 silent = 8;

    pub fn clear_silent(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_silent(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(AppleNotification_oneof_type::silent(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_silent(&mut self, v: u32) {
        self.field_type = ::std::option::Option::Some(AppleNotification_oneof_type::silent(v))
    }

    pub fn get_silent(&self) -> u32 {
        match self.field_type {
            ::std::option::Option::Some(AppleNotification_oneof_type::silent(v)) => v,
            _ => 0,
        }
    }

    // optional .notification.CustomData custom_data = 9;

    pub fn clear_custom_data(&mut self) {
        self.custom_data.clear();
    }

    pub fn has_custom_data(&self) -> bool {
        self.custom_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_custom_data(&mut self, v: CustomData) {
        self.custom_data = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_custom_data(&mut self) -> &mut CustomData {
        if self.custom_data.is_none() {
            self.custom_data.set_default();
        }
        self.custom_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_custom_data(&mut self) -> CustomData {
        self.custom_data.take().unwrap_or_else(|| CustomData::new())
    }

    pub fn get_custom_data(&self) -> &CustomData {
        self.custom_data.as_ref().unwrap_or_else(|| CustomData::default_instance())
    }
}

impl ::protobuf::Message for AppleNotification {
    fn is_initialized(&self) -> bool {
        for v in &self.headers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.result {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(AppleNotification_oneof_type::localized(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.custom_data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.headers)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.badge = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.sound)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.category)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.result)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(AppleNotification_oneof_type::localized(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(AppleNotification_oneof_type::plain(is.read_string()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(AppleNotification_oneof_type::silent(is.read_uint32()?));
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.custom_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.headers.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.badge {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.sound.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(ref v) = self.category.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(ref v) = self.result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.custom_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.field_type {
            match v {
                &AppleNotification_oneof_type::localized(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &AppleNotification_oneof_type::plain(ref v) => {
                    my_size += ::protobuf::rt::string_size(7, &v);
                },
                &AppleNotification_oneof_type::silent(v) => {
                    my_size += ::protobuf::rt::value_size(8, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.headers.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.badge {
            os.write_uint32(2, v)?;
        }
        if let Some(ref v) = self.sound.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(ref v) = self.category.as_ref() {
            os.write_string(4, &v)?;
        }
        if let Some(ref v) = self.result.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.custom_data.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.field_type {
            match v {
                &AppleNotification_oneof_type::localized(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &AppleNotification_oneof_type::plain(ref v) => {
                    os.write_string(7, v)?;
                },
                &AppleNotification_oneof_type::silent(v) => {
                    os.write_uint32(8, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AppleNotification {
        AppleNotification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApnsHeaders>>(
                    "headers",
                    |m: &AppleNotification| { &m.headers },
                    |m: &mut AppleNotification| { &mut m.headers },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "badge",
                    |m: &AppleNotification| { &m.badge },
                    |m: &mut AppleNotification| { &mut m.badge },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "sound",
                    |m: &AppleNotification| { &m.sound },
                    |m: &mut AppleNotification| { &mut m.sound },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "category",
                    |m: &AppleNotification| { &m.category },
                    |m: &mut AppleNotification| { &mut m.category },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApnsResult>>(
                    "result",
                    |m: &AppleNotification| { &m.result },
                    |m: &mut AppleNotification| { &mut m.result },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, AppleLocalizedAlert>(
                    "localized",
                    AppleNotification::has_localized,
                    AppleNotification::get_localized,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                    "plain",
                    AppleNotification::has_plain,
                    AppleNotification::get_plain,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor::<_>(
                    "silent",
                    AppleNotification::has_silent,
                    AppleNotification::get_silent,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CustomData>>(
                    "custom_data",
                    |m: &AppleNotification| { &m.custom_data },
                    |m: &mut AppleNotification| { &mut m.custom_data },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AppleNotification>(
                    "AppleNotification",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AppleNotification {
        static mut instance: ::protobuf::lazy::Lazy<AppleNotification> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AppleNotification,
        };
        unsafe {
            instance.get(AppleNotification::new)
        }
    }
}

impl ::protobuf::Clear for AppleNotification {
    fn clear(&mut self) {
        self.clear_headers();
        self.clear_badge();
        self.clear_sound();
        self.clear_category();
        self.clear_result();
        self.clear_localized();
        self.clear_plain();
        self.clear_silent();
        self.clear_custom_data();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AppleNotification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AppleNotification {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n%notification/apple_notification.proto\x12\x0cnotification\"Q\n\x0bApn\
    sHeaders\x12\x17\n\x0fapns_expiration\x18\x04\x20\x01(\x03\x12\x15\n\rap\
    ns_priority\x18\x05\x20\x01(\r\x12\x12\n\napns_topic\x18\x06\x20\x01(\t\
    \"\xc4\x06\n\nApnsResult\x12\x12\n\nsuccessful\x18\x01\x20\x02(\x08\x12/\
    \n\x06status\x18\x02\x20\x01(\x0e2\x1f.notification.ApnsResult.Status\
    \x12/\n\x06reason\x18\x03\x20\x01(\x0e2\x1f.notification.ApnsResult.Reas\
    on\x12\x11\n\ttimestamp\x18\x04\x20\x01(\x03\"\xbf\x01\n\x06Status\x12\
    \x0b\n\x07Success\x10\0\x12\x0e\n\nBadRequest\x10\x01\x12\t\n\x05Error\
    \x10\x02\x12\x12\n\x0eMissingChannel\x10\x03\x12\x0b\n\x07Timeout\x10\
    \x04\x12\x0b\n\x07Unknown\x10\x05\x12\x10\n\x0cUnregistered\x10\x06\x12\
    \r\n\tForbidden\x10\x07\x12\x14\n\x10MethodNotAllowed\x10\x08\x12\x13\n\
    \x0fPayloadTooLarge\x10\t\x12\x13\n\x0fTooManyRequests\x10\n\"\xea\x03\n\
    \x06Reason\x12\x10\n\x0cPayloadEmpty\x10\0\x12\x0c\n\x08BadTopic\x10\x02\
    \x12\x13\n\x0fTopicDisallowed\x10\x03\x12\x10\n\x0cBadMessageId\x10\x04\
    \x12\x15\n\x11BadExpirationDate\x10\x05\x12\x0f\n\x0bBadPriority\x10\x06\
    \x12\x16\n\x12MissingDeviceToken\x10\x07\x12\x12\n\x0eBadDeviceToken\x10\
    \x08\x12\x1a\n\x16DeviceTokenNotForTopic\x10\t\x12\x14\n\x10DuplicateHea\
    ders\x10\x0b\x12\x1d\n\x19BadCertificateEnvironment\x10\x0c\x12\x12\n\
    \x0eBadCertificate\x10\r\x12\x0b\n\x07BadPath\x10\x0f\x12\x0f\n\x0bIdleT\
    imeout\x10\x12\x12\x0c\n\x08Shutdown\x10\x13\x12\x17\n\x13InternalServer\
    Error\x10\x14\x12\x16\n\x12ServiceUnavailable\x10\x15\x12\x10\n\x0cMissi\
    ngTopic\x10\x16\x12\x16\n\x12MissingCertificate\x10\x17\x12\x18\n\x14Inv\
    alidProviderToken\x10\x18\x12\x18\n\x14MissingProviderToken\x10\x19\x12\
    \x18\n\x14ExpiredProviderToken\x10\x1a\x12\x0b\n\x07Nothing\x10\x1b\"\
    \xcb\x01\n\x13AppleLocalizedAlert\x12\r\n\x05title\x18\x01\x20\x02(\t\
    \x12\x0c\n\x04body\x18\x02\x20\x02(\t\x12\x15\n\rtitle_loc_key\x18\x03\
    \x20\x01(\t\x12\x16\n\x0etitle_loc_args\x18\x04\x20\x03(\t\x12\x16\n\x0e\
    action_loc_key\x18\x05\x20\x01(\t\x12\x0f\n\x07loc_key\x18\x06\x20\x01(\
    \t\x12\x10\n\x08loc_args\x18\x07\x20\x03(\t\x12\x14\n\x0claunch_image\
    \x18\x08\x20\x01(\t\x12\x17\n\x0fmutable_content\x18\t\x20\x01(\x08\"'\n\
    \nCustomData\x12\x0b\n\x03key\x18\x01\x20\x02(\t\x12\x0c\n\x04body\x18\
    \x02\x20\x02(\t\"\xab\x02\n\x11AppleNotification\x12*\n\x07headers\x18\
    \x01\x20\x01(\x0b2\x19.notification.ApnsHeaders\x12\r\n\x05badge\x18\x02\
    \x20\x01(\r\x12\r\n\x05sound\x18\x03\x20\x01(\t\x12\x10\n\x08category\
    \x18\x04\x20\x01(\t\x12(\n\x06result\x18\x05\x20\x01(\x0b2\x18.notificat\
    ion.ApnsResult\x126\n\tlocalized\x18\x06\x20\x01(\x0b2!.notification.App\
    leLocalizedAlertH\0\x12\x0f\n\x05plain\x18\x07\x20\x01(\tH\0\x12\x10\n\
    \x06silent\x18\x08\x20\x01(\rH\0\x12-\n\x0bcustom_data\x18\t\x20\x01(\
    \x0b2\x18.notification.CustomDataB\x06\n\x04type\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
