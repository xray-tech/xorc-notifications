// This file is generated by rust-protobuf 2.0.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct NotificationResult {
    // message fields
    header: ::protobuf::SingularPtrField<super::header::Header>,
    successful: ::std::option::Option<bool>,
    correlation_id: ::protobuf::SingularField<::std::string::String>,
    error: ::std::option::Option<NotificationResult_Error>,
    universe: ::protobuf::SingularField<::std::string::String>,
    reason: ::protobuf::SingularField<::std::string::String>,
    delete_user: ::std::option::Option<bool>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl NotificationResult {
    pub fn new() -> NotificationResult {
        ::std::default::Default::default()
    }

    // required .common.Header header = 1;

    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: super::header::Header) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut super::header::Header {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> super::header::Header {
        self.header.take().unwrap_or_else(|| super::header::Header::new())
    }

    pub fn get_header(&self) -> &super::header::Header {
        self.header.as_ref().unwrap_or_else(|| super::header::Header::default_instance())
    }

    // required bool successful = 2;

    pub fn clear_successful(&mut self) {
        self.successful = ::std::option::Option::None;
    }

    pub fn has_successful(&self) -> bool {
        self.successful.is_some()
    }

    // Param is passed by value, moved
    pub fn set_successful(&mut self, v: bool) {
        self.successful = ::std::option::Option::Some(v);
    }

    pub fn get_successful(&self) -> bool {
        self.successful.unwrap_or(false)
    }

    // required string correlation_id = 3;

    pub fn clear_correlation_id(&mut self) {
        self.correlation_id.clear();
    }

    pub fn has_correlation_id(&self) -> bool {
        self.correlation_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_correlation_id(&mut self, v: ::std::string::String) {
        self.correlation_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_correlation_id(&mut self) -> &mut ::std::string::String {
        if self.correlation_id.is_none() {
            self.correlation_id.set_default();
        }
        self.correlation_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_correlation_id(&mut self) -> ::std::string::String {
        self.correlation_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_correlation_id(&self) -> &str {
        match self.correlation_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional .notification.NotificationResult.Error error = 4;

    pub fn clear_error(&mut self) {
        self.error = ::std::option::Option::None;
    }

    pub fn has_error(&self) -> bool {
        self.error.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: NotificationResult_Error) {
        self.error = ::std::option::Option::Some(v);
    }

    pub fn get_error(&self) -> NotificationResult_Error {
        self.error.unwrap_or(NotificationResult_Error::Other)
    }

    // optional string universe = 5;

    pub fn clear_universe(&mut self) {
        self.universe.clear();
    }

    pub fn has_universe(&self) -> bool {
        self.universe.is_some()
    }

    // Param is passed by value, moved
    pub fn set_universe(&mut self, v: ::std::string::String) {
        self.universe = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_universe(&mut self) -> &mut ::std::string::String {
        if self.universe.is_none() {
            self.universe.set_default();
        }
        self.universe.as_mut().unwrap()
    }

    // Take field
    pub fn take_universe(&mut self) -> ::std::string::String {
        self.universe.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_universe(&self) -> &str {
        match self.universe.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional string reason = 6;

    pub fn clear_reason(&mut self) {
        self.reason.clear();
    }

    pub fn has_reason(&self) -> bool {
        self.reason.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reason(&mut self, v: ::std::string::String) {
        self.reason = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reason(&mut self) -> &mut ::std::string::String {
        if self.reason.is_none() {
            self.reason.set_default();
        }
        self.reason.as_mut().unwrap()
    }

    // Take field
    pub fn take_reason(&mut self) -> ::std::string::String {
        self.reason.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_reason(&self) -> &str {
        match self.reason.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // required bool delete_user = 7;

    pub fn clear_delete_user(&mut self) {
        self.delete_user = ::std::option::Option::None;
    }

    pub fn has_delete_user(&self) -> bool {
        self.delete_user.is_some()
    }

    // Param is passed by value, moved
    pub fn set_delete_user(&mut self, v: bool) {
        self.delete_user = ::std::option::Option::Some(v);
    }

    pub fn get_delete_user(&self) -> bool {
        self.delete_user.unwrap_or(false)
    }
}

impl ::protobuf::Message for NotificationResult {
    fn is_initialized(&self) -> bool {
        if self.header.is_none() {
            return false;
        }
        if self.successful.is_none() {
            return false;
        }
        if self.correlation_id.is_none() {
            return false;
        }
        if self.delete_user.is_none() {
            return false;
        }
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.successful = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.correlation_id)?;
                },
                4 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.error, 4, &mut self.unknown_fields)?
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.universe)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.reason)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.delete_user = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.successful {
            my_size += 2;
        }
        if let Some(ref v) = self.correlation_id.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.error {
            my_size += ::protobuf::rt::enum_size(4, v);
        }
        if let Some(ref v) = self.universe.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(ref v) = self.reason.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(v) = self.delete_user {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.successful {
            os.write_bool(2, v)?;
        }
        if let Some(ref v) = self.correlation_id.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(v) = self.error {
            os.write_enum(4, v.value())?;
        }
        if let Some(ref v) = self.universe.as_ref() {
            os.write_string(5, &v)?;
        }
        if let Some(ref v) = self.reason.as_ref() {
            os.write_string(6, &v)?;
        }
        if let Some(v) = self.delete_user {
            os.write_bool(7, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NotificationResult {
        NotificationResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::header::Header>>(
                    "header",
                    |m: &NotificationResult| { &m.header },
                    |m: &mut NotificationResult| { &mut m.header },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "successful",
                    |m: &NotificationResult| { &m.successful },
                    |m: &mut NotificationResult| { &mut m.successful },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "correlation_id",
                    |m: &NotificationResult| { &m.correlation_id },
                    |m: &mut NotificationResult| { &mut m.correlation_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<NotificationResult_Error>>(
                    "error",
                    |m: &NotificationResult| { &m.error },
                    |m: &mut NotificationResult| { &mut m.error },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "universe",
                    |m: &NotificationResult| { &m.universe },
                    |m: &mut NotificationResult| { &mut m.universe },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "reason",
                    |m: &NotificationResult| { &m.reason },
                    |m: &mut NotificationResult| { &mut m.reason },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "delete_user",
                    |m: &NotificationResult| { &m.delete_user },
                    |m: &mut NotificationResult| { &mut m.delete_user },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NotificationResult>(
                    "NotificationResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NotificationResult {
        static mut instance: ::protobuf::lazy::Lazy<NotificationResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NotificationResult,
        };
        unsafe {
            instance.get(NotificationResult::new)
        }
    }
}

impl ::protobuf::Clear for NotificationResult {
    fn clear(&mut self) {
        self.clear_header();
        self.clear_successful();
        self.clear_correlation_id();
        self.clear_error();
        self.clear_universe();
        self.clear_reason();
        self.clear_delete_user();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NotificationResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NotificationResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum NotificationResult_Error {
    Other = 1,
    Unsubscribed = 2,
}

impl ::protobuf::ProtobufEnum for NotificationResult_Error {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<NotificationResult_Error> {
        match value {
            1 => ::std::option::Option::Some(NotificationResult_Error::Other),
            2 => ::std::option::Option::Some(NotificationResult_Error::Unsubscribed),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [NotificationResult_Error] = &[
            NotificationResult_Error::Other,
            NotificationResult_Error::Unsubscribed,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("NotificationResult_Error", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for NotificationResult_Error {
}

impl ::protobuf::reflect::ProtobufValue for NotificationResult_Error {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n&notification/notification_result.proto\x12\x0cnotification\x1a\x13com\
    mon/header.proto\"\xf4\x01\n\x12NotificationResult\x12\x1e\n\x06header\
    \x18\x01\x20\x02(\x0b2\x0e.common.Header\x12\x12\n\nsuccessful\x18\x02\
    \x20\x02(\x08\x12\x16\n\x0ecorrelation_id\x18\x03\x20\x02(\t\x125\n\x05e\
    rror\x18\x04\x20\x01(\x0e2&.notification.NotificationResult.Error\x12\
    \x10\n\x08universe\x18\x05\x20\x01(\t\x12\x0e\n\x06reason\x18\x06\x20\
    \x01(\t\x12\x13\n\x0bdelete_user\x18\x07\x20\x02(\x08\"$\n\x05Error\x12\
    \t\n\x05Other\x10\x01\x12\x10\n\x0cUnsubscribed\x10\x02\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
